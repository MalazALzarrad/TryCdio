@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": ""
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false // root node is included
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "dasuki.Game"
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1338928835 { 
   	label=dasuki
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Dice1338928835[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Dice</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ rollDice(): int</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Game1338928835[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Game</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   B1: Konto [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   B2: Konto [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   P1: Spiller [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   P2: Spiller [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   dice: Dice [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># TjekHvisNogenHarVndet(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" ># VisSpilInstruktion()</TD></TR>
<TR><TD ALIGN="LEFT" >+ countFrequencies(list: ArrayList&lt;Integer&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" ># displayGameMenu()</TD></TR>
<TR><TD ALIGN="LEFT" >+ playOneRound(P: Spiller, B: Konto)</TD></TR>
<TR><TD ALIGN="LEFT" ># selectGameOption(optionSelected: int)</TD></TR>
<TR><TD ALIGN="LEFT" ># test1()</TD></TR>
<TR><TD ALIGN="LEFT" ># test2(B: Konto)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Konto1338928835[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Konto</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   Balance: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   BlackCave: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   ColdDesert: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   Crater: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   Goldmine: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   HutsInTheMountain: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   MIN: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   Monastery: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   PalaceGates: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   ThePit: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   TheWereWall: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   Tower: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   WalledCity: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ minBalance()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Spiller1338928835[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Spiller</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
Game1338928835 -> Dice1338928835[label="dice
[0..1]"];
Game1338928835 -> Konto1338928835[label="B1
[0..1]"];
Game1338928835 -> Konto1338928835[label="B2
[0..1]"];
Game1338928835 -> Spiller1338928835[label="P1
[0..1]"];
Game1338928835 -> Spiller1338928835[label="P2
[0..1]"];
    
}
@enduml